#!/usr/bin/env php
<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

set_time_limit(0);

require_once 'config.php';

require_once __DIR__ . '/../vendor/symfony/src/Symfony/Component/ClassLoader/UniversalClassLoader.php';
require_once __DIR__ . '/../vendor/propel/runtime/lib/Propel.php';
require_once __DIR__ . '/../vendor/propel/runtime/lib/connection/PropelPDO.php';
require_once __DIR__ . '/../app/autoload.php';
require_once __DIR__ . '/../app/AppKernel.php';


use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpKernel\Kernel;
use Sensio\Bundle\GeneratorBundle\Manipulator\KernelManipulator;

$installer = new Installer();
$installer->install($companyName, $bundleName, $host, $database, $user, $password, $driver);

/**
 * Description of installer
 *
 * @author giansimon
 */
class Installer {
    private $deployBundle;
    private $companyName;
    private $bundleName;
    private $host;
    private $database;
    private $user;
    private $password;
    private $driver;
    
    public function __construct() {
        $this->rootDir = __DIR__ . '/..';
    }


    public function install($companyName, $bundleName, $host, $database, $user, $password, $driver)
    {
        $this->companyName = $companyName;
        $this->bundleName = $bundleName;
        $this->host = $host;
        $this->database = $database;
        $this->user = $user;
        $this->password = $password;
        $this->driver = $driver;
        $this->deployBundle = $companyName . $bundleName;
                
        $this->checkPrerequisites();
        $this->setUpEnvironments();
        $this->writeConfigurations();
        $this->writeRoutes();
        $this->createDb();
        $this->manipulateAppKernel();
        $this->setup();
    }
    
    private function checkPrerequisites()
    {
        $dir = realpath($this->rootDir);
        
        $this->checkFolder($dir . '/vendor/propel');
        $this->checkFolder($dir . '/vendor/phing');
        $this->checkFolder($dir . '/vendor/bundles/Propel/PropelBundle');
        $this->checkFolder($dir . '/vendor/bundles/AlphaLemon/AlphaLemonCmsBundle');
        $this->checkFolder($dir . '/vendor/bundles/AlphaLemon/PageTreeBundle');
        $this->checkFolder($dir . '/vendor/bundles/AlphaLemon/AlValumUploaderBundle');
        $this->checkFolder($dir . '/vendor/bundles/AlphaLemon/ElFinderBundle');
        $this->checkFolder($dir . '/vendor/bundles/AlphaLemon/ThemeEngineBundle');
        $this->checkFolder($dir . '/web/js/tiny_mce');
        $this->checkFile($dir . '/app/Resources/java/yuicompressor.jar');
        
        $contents = file_get_contents($this->rootDir . '/app/AppKernel.php');
        preg_match("/[\s|\t]+new " . $this->companyName . "\\\\" . $this->bundleName . "/s", $contents, $match);
        if(empty ($match))
        {
            echo "\nAlphaLemon CMS requires an existing bundle to work with. You enter as working bundle the following: $this->companyName\\$this->bundleName but, the bundle is not enable in AppKernel.php file. Please add the bundle or enable it ther run the script again.\n";
            
            die;
        }
    }
    
    private function manipulateAppKernel()
    {
        $kernel = new \AppKernel('dev', true);
        $km = new KernelManipulator($kernel);
        $this->addBundle($km, 'Propel\PropelBundle\PropelBundle');
        $this->addBundle($km, 'AlphaLemon\FrontendBundle\AlphaLemonFrontendBundle');
        $this->addBundle($km, 'AlphaLemon\PageTreeBundle\AlphaLemonPageTreeBundle');
        $this->addBundle($km, 'AlphaLemon\ThemeEngineBundle\AlphaLemonThemeEngineBundle');
        
        $kernelFile = $this->rootDir . '/app/AppKernel.php';
        $contents = file_get_contents($kernelFile);
       
        if(strpos($contents, '$themes = new \AlphaLemon\ThemeEngineBundle\Core\Autoloader\ThemesAutoloader()') === false)
        {
            $cmsBundles = "\$themes = new \ThemeEngineCore\Autoloader\ThemesAutoloader();\n";
            $cmsBundles .= "        \$bundles = array_merge(\$bundles, \$themes->getBundles());\n";            
            $cmsBundles .= "        if (in_array(\$this->getEnvironment(), array('alcms', 'alcms_dev', 'test'))) {\n";
            $cmsBundles .= "            \$bundles[] = new AlphaLemon\AlValumUploaderBundle\AlValumUploaderBundle();\n";
            $cmsBundles .= "            \$bundles[] = new AlphaLemon\ElFinderBundle\AlphaLemonElFinderBundle();\n"; 
            $cmsBundles .= "            \$bundles[] = new AlphaLemon\AlphaLemonCmsBundle\AlphaLemonCmsBundle();\n";  
            $cmsBundles .= "            \$internalBundles = new \AlphaLemon\AlphaLemonCmsBundle\Core\Autoloader\InternalBundlesAutoloader();\n";;
            $cmsBundles .= "            \$bundles = array_merge(\$bundles, \$internalBundles->getBundles());\n";
            $cmsBundles .= "        }\n\n";
            $cmsBundles .= "        if (in_array(\$this->getEnvironment(), array('dev', 'test', 'alcms_dev'";

            $contents = preg_replace('/if \(in_array\(\$this-\>getEnvironment\(\), array\(\'dev\', \'test\'/s', $cmsBundles, $contents);
            file_put_contents($kernelFile, $contents);
        }
    }
    
    private function addBundle(KernelManipulator $km, $bundleName)
    {
        try
        {
            $km->addBundle($bundleName);
        }
        catch (\RuntimeException $ex)
        {
            
        }
    }


    private function checkFolder($dirName)
    {
        if(!is_dir($dirName))
        {
            echo "\nAn error occoured. AlphaLemon CMS requires " . basename($dirName) . " installed into " . dirname($dirName) . " folder. Please install the required library then run the script again.\n";
            die;
        }
    }
    
    private function checkFile($fileName)
    {
        if(!is_file($fileName))
        {
            echo "\nAn error occoured. AlphaLemon CMS requires " . basename($dirName) . " installed into " . dirname($dirName) . " folder. Please install the required library then run the script again.\n";
            die;
        }
    }
    
    private function setUpEnvironments()
    {
        $fs = new Filesystem();
        $fs->copy($this->rootDir . '/vendor/bundles/AlphaLemon/AlphaLemonCmsBundle/Resources/environments/frontcontrollers/alcms.php', $this->rootDir . '/web/alcms.php', true);
        $fs->copy($this->rootDir . '/vendor/bundles/AlphaLemon/AlphaLemonCmsBundle/Resources/environments/frontcontrollers/alcms_dev.php', $this->rootDir . '/web/alcms_dev.php', true);
        $fs->copy($this->rootDir . '/vendor/bundles/AlphaLemon/AlphaLemonCmsBundle/Resources/environments/config/config_alcms.yml', $this->rootDir . '/app/config/config_alcms.yml', true);
        $fs->copy($this->rootDir . '/vendor/bundles/AlphaLemon/AlphaLemonCmsBundle/Resources/environments/config/config_alcms_dev.yml', $this->rootDir . '/app/config/config_alcms_dev.yml', true);
        $fs->copy($this->rootDir . '/vendor/bundles/AlphaLemon/AlphaLemonCmsBundle/Resources/environments/config/routing_alcms.yml', $this->rootDir . '/app/config/routing_alcms.yml', true);
        $fs->copy($this->rootDir . '/vendor/bundles/AlphaLemon/AlphaLemonCmsBundle/Resources/environments/config/routing_alcms_dev.yml', $this->rootDir . '/app/config/routing_alcms_dev.yml', true);
    }
    
    private function writeConfigurations()
    {
        $configFile = $this->rootDir . '/app/config/config.yml';
        $contents = file_get_contents($configFile);
        preg_match('/alpha_lemon_frontend/', $contents, $match);
        
        if(empty($match))
        {
            $config = "\nalpha_lemon_frontend:\n";
            $config .= "    deploy_bundle: $this->deployBundle\n\n";    
            $config .= "alpha_lemon_theme_engine:\n";
            $config .= "    base_template: AlphaLemonFrontendBundle:Theme:base.html.twig\n\n";
            $config .= "propel:\n";
            $config .= "    path:       \"%kernel.root_dir%/../vendor/propel\"\n";
            $config .= "    phing_path: \"%kernel.root_dir%/../vendor/phing\"\n\n";
            $config .= "    dbal:\n";
            $config .= "        driver:               $this->driver\n";
            $config .= "        user:                 $this->user\n";
            $config .= "        password:             $this->password\n";
            $config .= "        dsn:                  $this->driver:host=$this->host;dbname=$this->database\n";
            $config .= "        options:              {}\n";
            $config .= "        attributes:           {}\n";
            $config .= "        default_connection:   default\n\n";
            $config .= "assetic:\n";
            $config .= "    filters:\n";
            $config .= "        cssrewrite: ~\n";
            $config .= "        yui_css:\n";
            $config .= "            jar: %kernel.root_dir%/Resources/java/yuicompressor.jar\n";
            $config .= "        yui_js:\n";
            $config .= "            jar: %kernel.root_dir%/Resources/java/yuicompressor.jar";
            
            file_put_contents($configFile, $contents . $config);
        }
    }
    
    private function writeRoutes()
    {
        $configFile = $this->rootDir . '/app/config/routing.yml';
        $contents = file_get_contents($configFile);
        preg_match("/_$this->deployBundle/", $contents, $match);
        
        if(empty($match))
        {
            $config = "_$this->deployBundle:\n";
            $config .= "    resource: \"@$this->deployBundle/Resources/config/site_routing.yml\"\n\n";

            file_put_contents($configFile, $config . $contents);
        }
    }
    
    private function createDb()
    {
        try
        {
            $connection = new \PropelPDO(sprintf("mysql:host=%s", $this->host), $this->user, $this->password);

            $query = 'CREATE DATABASE ' . $this->database;
            $statement = $connection->prepare($query);
            $statement->execute();
        }
        catch(Exception $ex)
        {
            echo $ex->getMessage();
        }
    }
    
    private function setup()
    {
        $kernel = new \AppKernel('alcms_dev', true);
        $kernel->boot();
        $cmd = sprintf('alphalemon:populate %s %s %s %s --driver=%s', $this->host, $this->database, $this->user, $this->password, $this->driver);
    echo $cmd;exit;
        \AlphaLemon\PageTreeBundle\Core\Tools\AlToolkit::executeCommand($kernel, array('propel:build',
                                                                     'propel:insert-sql --force',
                                                                     $cmd,
                                                                     'assets:install ' . $this->rootDir . '/web --symlink',
                                                                     'assetic:dump',
                                                                     'cache:clear',
            ));
    }
}
